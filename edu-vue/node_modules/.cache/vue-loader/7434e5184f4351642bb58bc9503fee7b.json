{"remainingRequest":"F:\\workspace\\vscode\\vue\\test1-vue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!F:\\workspace\\vscode\\vue\\test1-vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\workspace\\vscode\\vue\\test1-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\workspace\\vscode\\vue\\test1-vue\\src\\components\\Index.vue?vue&type=template&id=82b7485c&scoped=true&","dependencies":[{"path":"F:\\workspace\\vscode\\vue\\test1-vue\\src\\components\\Index.vue","mtime":1598943440791},{"path":"F:\\workspace\\vscode\\vue\\test1-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\workspace\\vscode\\vue\\test1-vue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"F:\\workspace\\vscode\\vue\\test1-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\workspace\\vscode\\vue\\test1-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}